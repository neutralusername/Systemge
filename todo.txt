build specialized "dashboards" for various packages. for example to add topics to broker server/resolver through a web mask, manage clients on sytemge server, etc
-allow the systemgeServerDashboard and systemgeClientDashboard the ability to manage all its connections like through the systemgeConnectionDashboard
-systemgeConnectionDashboard X
-systemgeServerDashboard 
-brokerResolverDashboard
-brokerClientDashboard  (include visual elements that represent subscribed topics and whether they are successfully connected to)
-brokerServerDashboard
-singleRequestServerDashboard
-websocketServerDashboard
-httpServerDashboard
-oauth2ServerDashboard

implement manual metrics update in some form (especially in regards to ranges of average values (e.g. bytes sent not together with messages sent))
implement different types of data visualizations
create some sort of menu to view selected metrics-types

rework/replace sync messages with a more general approach
-> replace "syncTokens" with "attribute"
-> per systemgeConnection, per attribute, a list of message handlers can be defined that are executed in order
-> api for sync messages will stay more or less unchanged for sending. responses will be a bit different since there will only be one type of message handlers
(still thinking about a convinient way to determine whether a message expects a reply /which attribute or whether thats neccessary)

make websocketServer stop-operation cleaner

update oauth2server (add dashboard client etc.)

update readme

improve logging (especially systemge and broker packages)

implement "password" in some form into the dashboard (for the beginning as access control as an alternative to whitelist)

re-create "nodes" consisting of messageBrokerClient, httpServer, websocketServer and dashboardClient

add ChannelConnection and channelListener as more performant alternative for systems within a single process
consider adding PipeConnection and PipeListener as more performant alternative for systems within a single device

write something that takes in configs and create an executable, that can be used to easily perform systemge-operations through the (os-)command line (such as sending messages) i.e. through the provided args

possibly create a way to access systemge-operations (i.e. operations from a structs like systemgeServer) through os-level shared memory and synchronization (syscall package)

support the option for custom dashboard clients and frontend pages (react components)