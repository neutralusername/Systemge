create a bunch of wrapper functions with events (commands, httpRequests etc)
make sure http server stop only returns after all its http requests finished!!
only create events where some sort of state is altered (or error occurs)

build specialized "dashboards" for various packages. for example to add topics to broker server/resolver through a web mask, manage clients on sytemge server, etc
-allow the systemgeServerDashboard and systemgeClientDashboard the ability to manage all its connections like through the systemgeConnectionDashboard
-systemgeConnectionDashboard X
-systemgeServerDashboard X
-brokerResolverDashboard
-brokerClientDashboard  (include visual elements that represent subscribed topics and whether they are successfully connected to)
-brokerServerDashboard
-singleRequestServerDashboard
-websocketServerDashboard
-httpServerDashboard
-oauth2ServerDashboard

consider/support config changes at runtime.
right now this is not officially supported and works for some fields, but not for others.

split up websocketServer into listener, server and connection like systemge
add sync messaging system between websocketServer and its clients

add authentication/key mechanism for listeners

create timeout mechanism for message handlers (abbandon goroutine after x ms and continue)

display error responses somehow on dashboard
hide password input on dashboard (will create a custom password-mask and remove the usage of prompt-popup)
add status for non-landing pages
more expressive response messages (so it becomes clear what the underlying request/command was)
make content less ugly (style for input elements, status, metrics)

create some sort of menu to view selected metrics-types

add http calls for dashboard commands somehow

add dashboard chat/notes

implement different types of data visualizations
implement manual metrics update in some form (especially in regards to ranges of average values (e.g. bytes sent not together with messages sent))

option to create csv file based on update routine and response messages
maybe other types of csv files as well (e.g. connects/disconnects, message timestamps, topics and senders?)

refactor brokerResolver to use singleRequestServer

update oauth2server (add dashboard client etc.)

(maybe) add onError, onWarning, onInfo functions for systemge structs instead of logging by default
(maybe) create general error types that can be used to detect and act on specific event (failures).
(maybe) pass error and string for specific context into this function

update readme

re-create "nodes" consisting of messageBrokerClient, httpServer, websocketServer and dashboardClient

add ChannelConnection and channelListener as more performant alternative for systems within a single process
consider adding PipeConnection and PipeListener as more performant alternative for systems within a single device

write something that takes in configs and create an executable, that can be used to easily perform systemge-operations through the (os-)command line (such as sending messages) i.e. through the provided args

possibly create a way to access systemge-operations (i.e. operations from a structs like systemgeServer) through os-level shared memory and synchronization (syscall package)

support the option for custom dashboard clients and frontend pages (react components)

extend syncToken functionality so that you can register/manage syncTokens/responses more independetly of sync requests 
sync request/responses api will stay virtually unchanged (the connection.SyncResponse() method will change slightly to work based on token instead based on message)
in addition it will be possible to register syncTokens on receiver side, and gather manual sync responses (connection.SyncResponse())
with the effect, that one connection can send multiple responses for one sync token (while leaving everything else as easy to use as it is now)
Add SyncResponses struct that is returned instead of a message channel. the struct can be used to receive response messages or cancel the token. (also make it possible to get the response channel)
change syncRequests/tokens to either stay alive until a certain time passed, or a certain number of responses was received (or was manually cancelled)

add some functionality to visualize how clients of a dashboardServer are connected to each other (ask them for connected names)

give option to use custom marshallers (idk about implementation details yet)